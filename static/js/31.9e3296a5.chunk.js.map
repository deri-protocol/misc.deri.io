{"version":3,"sources":["utils/graph_api.js","pages/Leaderboard/Leaderboard.tsx"],"names":["graphQLClient","GraphQLClient","require","graph_request_test","mutation","variables","request","inject","observer","useState","rankingsList","setRankingsList","accountDays","setAccountDays","listDays","setListDays","accountInfo","setAccountInfo","account","useWallet","loadList","useCallback","query","gql","timestamp","date","Date","now","getTime","timeDay","chainId","fromTimestamp","parseInt","String","data","tradePnl","length","list","slice","getAccountInfo","tradeFee","pnl","notional","useEffect","className","classnames","active","onClick","prefix","value","decimalScale","map","item","index","token","width","undefined","height","secondary","formatAddress","displayType","up","down"],"mappings":"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","file":"static/js/31.9e3296a5.chunk.js","sourcesContent":["const {GraphQLClient } = require('graphql-request')\r\nconst graphQLClient = new GraphQLClient(\"https://v4dh.deri.io/graphql\", {})\r\nexport function graph_request_test(mutation,variables) {\r\n    return graphQLClient.request(mutation,variables)\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport DeriNumberFormat from \"../../utils/DeriNumberFormat\";\r\nimport \"./leaderboard.less\";\r\nimport Icon from \"../../components/Icon/Icon\";\r\nimport { gql } from \"graphql-request\";\r\nimport { graph_request_test } from \"../../utils/graph_api\";\r\nimport { formatAddress } from \"../../utils/utils\";\r\nimport { useCallback } from \"react\";\r\nimport { useWallet } from \"use-wallet\";\r\n\r\nfunction Leaderboard() {\r\n  const [rankingsList, setRankingsList] = useState<any>([]);\r\n  const [accountDays, setAccountDays] = useState(30);\r\n  const [listDays, setListDays] = useState(30);\r\n  const [accountInfo, setAccountInfo] = useState<any>({});\r\n  const { account } = useWallet();\r\n  const timeDay: number = 86400;\r\n  const loadList = useCallback(async () => {\r\n    let query = gql`\r\n      query ($chainId: Int!, $fromTimestamp: Int!) {\r\n        tradePnl(where: { chainId: $chainId, fromTimestamp: $fromTimestamp }) {\r\n          account\r\n          chainId\r\n          liquidationLoss\r\n          notional\r\n          pnl\r\n          tradeFee\r\n          tradePnl\r\n        }\r\n      }\r\n    `;\r\n    let timestamp = 0;\r\n    let date = new Date();\r\n    let now = date.getTime() / 1000;\r\n    if (listDays === 7) {\r\n      timestamp = now - timeDay * 7;\r\n    }\r\n    if (listDays === 30) {\r\n      timestamp = now - timeDay * 30;\r\n    }\r\n    let variables = {\r\n      chainId: 42161,\r\n      fromTimestamp: parseInt(String(timestamp)),\r\n    };\r\n    let data = await graph_request_test(query, variables);\r\n    if (data.tradePnl.length) {\r\n      let list = data.tradePnl;\r\n      list = list.slice(0, 50);\r\n      setRankingsList(list);\r\n    }\r\n  }, [listDays]);\r\n  const getAccountInfo = useCallback(async () => {\r\n    let query = gql`\r\n      query ($chainId: Int!, $fromTimestamp: Int!, $account: String) {\r\n        tradePnl(\r\n          where: {\r\n            account: $account\r\n            chainId: $chainId\r\n            fromTimestamp: $fromTimestamp\r\n          }\r\n        ) {\r\n          account\r\n          chainId\r\n          liquidationLoss\r\n          notional\r\n          pnl\r\n          tradeFee\r\n          tradePnl\r\n        }\r\n      }\r\n    `;\r\n    let timestamp = 0;\r\n    let date = new Date();\r\n    let now = date.getTime() / 1000;\r\n    if (accountDays === 7) {\r\n      timestamp = now - timeDay * 7;\r\n    }\r\n    if (accountDays === 30) {\r\n      timestamp = now - timeDay * 30;\r\n    }\r\n    let variables = {\r\n      account: account,\r\n      chainId: 56,\r\n      fromTimestamp: parseInt(String(timestamp)),\r\n    };\r\n    let data = await graph_request_test(query, variables);\r\n    if (data.tradePnl.length) {\r\n      let list = data.tradePnl[0];\r\n      setAccountInfo(list);\r\n    } else {\r\n      setAccountInfo({\r\n        tradeFee: 0,\r\n        pnl: 0,\r\n        notional: 0,\r\n      });\r\n    }\r\n  }, [accountDays, account]);\r\n\r\n  useEffect(() => {\r\n    loadList();\r\n  }, [listDays]);\r\n  useEffect(() => {\r\n    if (account) {\r\n      getAccountInfo();\r\n    }\r\n  }, [account, accountDays]);\r\n  return (\r\n    <div className=\"Leaderboard\">\r\n      <div className=\"Leaderboard-box\">\r\n        <div className=\"my-historical-trading\">\r\n          <div className=\"title-tab-day\">\r\n            <div className=\"title-leaderboard\">\r\n              My Historical Trading Performance\r\n            </div>\r\n            <div className=\"tab-day\">\r\n              <div\r\n                className={classnames(\"day-btn\", {\r\n                  active: accountDays === 7,\r\n                })}\r\n                onClick={() => {\r\n                  setAccountDays(7);\r\n                }}\r\n              >\r\n                7 DAYS\r\n              </div>\r\n              <div\r\n                className={classnames(\"day-btn\", {\r\n                  active: accountDays === 30,\r\n                })}\r\n                onClick={() => {\r\n                  setAccountDays(30);\r\n                }}\r\n              >\r\n                30 DAYS\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"my-info-list\">\r\n            <div className=\"info-box\">\r\n              <div className=\"info-num\">\r\n                {\" \"}\r\n                <DeriNumberFormat\r\n                  prefix=\"$ \"\r\n                  value={accountInfo.notional}\r\n                  decimalScale={2}\r\n                />\r\n              </div>\r\n              <div className=\"info-title\"> Notional </div>\r\n            </div>\r\n            <div className=\"info-box\">\r\n              <div className=\"info-num\">\r\n                <DeriNumberFormat\r\n                  prefix=\"$ \"\r\n                  value={+accountInfo.tradeFee}\r\n                  decimalScale={2}\r\n                />\r\n              </div>\r\n              <div className=\"info-title\"> Transaction Fee </div>\r\n            </div>\r\n            <div className=\"info-box\">\r\n              <div className=\"info-num\">\r\n                {\" \"}\r\n                <DeriNumberFormat\r\n                  prefix=\"$ \"\r\n                  value={+accountInfo.pnl}\r\n                  decimalScale={2}\r\n                />\r\n              </div>\r\n              <div className=\"info-title\"> PNL </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"rankings\">\r\n          <div className=\"rankings-title-tab-day\">\r\n            <div className=\"rankings-title\">Rankings</div>\r\n            <div className=\"tab-day\">\r\n              <div\r\n                className={classnames(\"day-btn\", { active: listDays === 7 })}\r\n                onClick={() => {\r\n                  setListDays(7);\r\n                }}\r\n              >\r\n                7 DAYS\r\n              </div>\r\n              <div\r\n                className={classnames(\"day-btn\", { active: listDays === 30 })}\r\n                onClick={() => {\r\n                  setListDays(30);\r\n                }}\r\n              >\r\n                30 DAYS\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"rankings-list-title\">\r\n            <div className=\"rank\">Rank</div>\r\n            <div className=\"trade\">Trade</div>\r\n            <div className=\"notional\">Notional</div>\r\n            <div className=\"transaction-fee\">Transaction Fee</div>\r\n            <div className=\"pnl\">PNL</div>\r\n          </div>\r\n          <div className=\"rankings-list-num\">\r\n            {rankingsList.map((item, index) => {\r\n              return (\r\n                <div className=\"rankings-list-num-box\" key={index}>\r\n                  <div className=\"rank\">\r\n                    {index + 1 === 1 && (\r\n                      <Icon\r\n                        token=\"topOne\"\r\n                        width={undefined}\r\n                        height={undefined}\r\n                        secondary={undefined}\r\n                        className={undefined}\r\n                        onClick={undefined}\r\n                      />\r\n                    )}\r\n                    {index + 1 === 2 && (\r\n                      <Icon\r\n                        token=\"topTwo\"\r\n                        width={undefined}\r\n                        height={undefined}\r\n                        secondary={undefined}\r\n                        className={undefined}\r\n                        onClick={undefined}\r\n                      />\r\n                    )}\r\n                    {index + 1 === 3 && (\r\n                      <Icon\r\n                        token=\"topThree\"\r\n                        width={undefined}\r\n                        height={undefined}\r\n                        secondary={undefined}\r\n                        className={undefined}\r\n                        onClick={undefined}\r\n                      />\r\n                    )}\r\n                    {index + 1 > 3 && (\r\n                      <span className=\"top-num\">{index + 1}</span>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"trade\">{formatAddress(item.account)}</div>\r\n                  <div className=\"notional\">\r\n                    ${\" \"}\r\n                    <DeriNumberFormat\r\n                      value={item.notional}\r\n                      displayType=\"text\"\r\n                      decimalScale={2}\r\n                    />\r\n                  </div>\r\n                  <div className=\"transaction-fee\">\r\n                    ${\" \"}\r\n                    <DeriNumberFormat\r\n                      value={+item.tradeFee}\r\n                      displayType=\"text\"\r\n                      decimalScale={2}\r\n                    />\r\n                  </div>\r\n                  <div\r\n                    className={classnames(\"pnl\", {\r\n                      up: +item.pnl > 0,\r\n                      down: +item.pnl < 0,\r\n                    })}\r\n                  >\r\n                    {+item.pnl > 0 ? \"+\" : \"\"}\r\n                    <DeriNumberFormat\r\n                      value={+item.pnl}\r\n                      displayType=\"text\"\r\n                      decimalScale={2}\r\n                      prefix=\"$ \"\r\n                      // allowZero={true}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default inject(\"wallet\")(observer(Leaderboard));\r\n"],"sourceRoot":""}
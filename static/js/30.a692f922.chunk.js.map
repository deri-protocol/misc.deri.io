{"version":3,"sources":["hooks/useContract.ts","pages/Compensation/img/time.svg","pages/Compensation/Compensation.tsx"],"names":["r","contractdescribers","useContract","name","wallet","useWallet","getContract","address","abi","ethereum","useMemo","provider","Web3Provider","Contract","account","getSigner","connectUnchecked","getProviderOrSigner","require","keys","forEach","key","path","split","last","length","substring","indexOf","inject","observer","lang","useState","balance","setBalance","disabled","setDisabled","alert","useAlert","isExist","setIsExist","contract","balanceContract","transactionTitle","processing","success","error","transactionContent","getBalance","isConnected","eqInNumber","detail","chainId","compensations","balances","decimals","console","log","BigNumber","from","_hex","toString","amount","toNumber","click","claim","res","data","message","hash","Emitter","emit","EVENT_TRANS_BEGIN","title","content","wait","receipt","transactionHash","status","EVENT_TRANS_END","context","useEffect","Date","getTime","className","rel","target","href","formatAddress","DeriNumberFormat","value","decimalScale","thousandSeparator","src","timeLogo","alt","Button","fontWeight","label","width","height","fontSize","onClick","bgColor","undefined","selectedBorderColor","position","icon"],"mappings":"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","file":"static/js/30.a692f922.chunk.js","sourcesContent":["import {Contract,ContractInterface} from '@ethersproject/contracts'\r\nimport {JsonRpcProvider,JsonRpcSigner,Web3Provider} from '@ethersproject/providers'\r\nimport { useMemo } from 'react'\r\nimport { useWallet } from 'use-wallet'\r\n\r\nconst contractdescribers = {}\r\n\r\nfunction importAll(r){\r\n  return r.keys().forEach(key => {\r\n    const path = key.split('/')\r\n    const last = path[path.length -1]\r\n    contractdescribers[last.substring(0,last.indexOf('.'))] = r(key)\r\n  });\r\n}\r\n\r\nimportAll(require.context(`../abis/`,true,/\\.json$/))\r\n\r\nexport default function useContract(name : string) : Contract {\r\n  const wallet = useWallet();\r\n  const { address ,abi } = getContract(name)\r\n  const {ethereum } = wallet    \r\n  return useMemo(() => {\r\n    if(!address || !abi || !ethereum) return null\r\n    const provider = new Web3Provider(ethereum,'any')  \r\n    // provider.on('network',(newNetwork,oldNetwork) => {\r\n\r\n    // }) \r\n    return new Contract(address,abi,getProviderOrSigner(provider,wallet.account))\r\n  },[address,abi,ethereum]) \r\n}\r\n\r\n// account is not optional\r\nfunction getSigner(provider: JsonRpcProvider, account: string): JsonRpcSigner {\r\n  return provider.getSigner(account).connectUnchecked()\r\n}\r\n\r\n// account is optional\r\nfunction getProviderOrSigner(provider: JsonRpcProvider, account?: string): JsonRpcProvider | JsonRpcSigner {\r\n  return account ? getSigner(provider, account) : provider\r\n}\r\n\r\nfunction getContract(name : string) : ContractDescriber {\r\n  return contractdescribers[name]\r\n}\r\n\r\ninterface ContractDescriber {\r\n  address : string,\r\n  abi : ContractInterface\r\n}","export default __webpack_public_path__ + \"static/media/time.77d9d1c0.svg\";","import React, { useState, useEffect } from \"react\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { formatAddress, eqInNumber } from \"../../utils/utils\";\r\nimport { useAlert } from \"react-alert\";\r\nimport DeriNumberFormat from \"../../utils/DeriNumberFormat\";\r\nimport Button from \"../../components/Button/Button\";\r\nimport timeLogo from \"./img/time.svg\";\r\nimport \"./compensation.less\";\r\nimport useContract from \"../../hooks/useContract\";\r\nimport {\r\n  EVENT_TRANS_BEGIN,\r\n  EVENT_TRANS_END,\r\n} from \"../../utils/Constants\";\r\nimport Emitter from \"../../utils/Emitter\";\r\nimport { BigNumber } from \"ethers\"\r\n\r\nexport interface Props {\r\n  wallet: any;\r\n  lang: any;\r\n}\r\n\r\nfunction Compensation({ wallet, lang }: Props) {\r\n  const [balance, setBalance] = useState(0);\r\n  const [disabled, setDisabled] = useState(true);\r\n  const alert = useAlert();\r\n  const [isExist, setIsExist] = useState(false);\r\n  const contract = useContract(\"compensation\");\r\n  const balanceContract = useContract(\"ERC20USDC\");\r\n  const transactionTitle = {\r\n    processing: \"Claim Processing\",\r\n    success: \"Claim Reward Executed\",\r\n    error: \"Claim Reward Failed\",\r\n  };\r\n  const transactionContent = {\r\n    success: \"Claim Reward\",\r\n    error: \"Transaction Failed\",\r\n  };\r\n\r\n  const getBalance = async () => {\r\n    if (\r\n      wallet.isConnected() &&\r\n      contract &&\r\n      eqInNumber(wallet.detail.chainId, 42161)\r\n    ) {\r\n      const balances = await contract.compensations(wallet.detail.account);\r\n      let decimals = await balanceContract.decimals();\r\n      console.log(BigNumber.from(balances._hex).toString());\r\n      let amount = BigNumber.from(balances._hex).toNumber() / 10 ** decimals;\r\n      if (+amount > 0) {\r\n        setIsExist(true);\r\n      } else {\r\n        setIsExist(false);\r\n      }\r\n      setBalance(amount);\r\n    }\r\n  };\r\n\r\n  const getWalletBalance = async () => {\r\n    if (+wallet.detail.chainId === 42161 && balanceContract) {\r\n      let balance = await balanceContract.balanceOf(wallet.detail.account);\r\n      let decimals = await balanceContract.decimals();\r\n      balance = BigNumber.from(balance._hex).toNumber() / 10 ** decimals;\r\n      setBalance(balance);\r\n    }\r\n  };\r\n  const click = async () => {\r\n    if (wallet.isConnected() && contract && wallet.detail.chainId === 42161) {\r\n      let res;\r\n      try {\r\n        res = await contract.claim();\r\n      } catch (error) {\r\n        console.log(error);\r\n        if (error.error && error.error.data && error.error.data.message) {\r\n          let message = error.error.data.message;\r\n          alert.error(message);\r\n        }\r\n        return false;\r\n      }\r\n      if (res && res.hash) {\r\n        Emitter.emit(EVENT_TRANS_BEGIN, {\r\n          title: transactionTitle,\r\n          content: transactionContent,\r\n          hash: res.hash,\r\n        });\r\n      } else {\r\n        return false;\r\n      }\r\n      const receipt = await res.wait();\r\n      console.log(\"receipt\", receipt);\r\n      if (receipt) {\r\n        console.log(\"receipt\", receipt);\r\n        if (receipt && receipt.transactionHash) {\r\n          const hash = receipt.transactionHash;\r\n          if (receipt.status) {\r\n            getBalance();\r\n            // getWalletBalance()\r\n            setDisabled(true);\r\n            Emitter.emit(EVENT_TRANS_END, {\r\n              title: transactionTitle,\r\n              content: transactionContent,\r\n              context: { success: true, hash: hash, error: \"error\" },\r\n            });\r\n          } else {\r\n            Emitter.emit(EVENT_TRANS_END, {\r\n              title: transactionTitle,\r\n              content: transactionContent,\r\n              context: { success: false, hash: hash, error: \"error\" },\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (wallet.isConnected()) {\r\n      getBalance();\r\n      // getWalletBalance()\r\n    }\r\n  }, [wallet.chainId, wallet.account]);\r\n\r\n  useEffect(() => {\r\n    if (isExist) {\r\n      let timestamp = new Date();\r\n      if (timestamp.getTime() >= 1675814400000) {\r\n        setDisabled(true);\r\n      } else {\r\n        setDisabled(false);\r\n      }\r\n    } else {\r\n      setDisabled(true);\r\n    }\r\n  }, [isExist]);\r\n\r\n  return (\r\n    <div className=\"airdrop-box\">\r\n      <div className=\"airdrop-info\">\r\n        <div className=\"airdrop-info-box\">\r\n          <div className=\"airdrop-title\">\r\n            {/* {lang['title']} */}\r\n            DERI Compensation Plan\r\n          </div>\r\n          <div>\r\n            A fund has been set up by the treasury to compensate for the loss of\r\n            liquidity providers due to exploit on 2022-10-28. Refer{\" \"}\r\n            <a\r\n              rel=\"noreferrer\"\r\n              target=\"_blank\"\r\n              href=\"https://deri-protocol.medium.com/post-mortem-of-the-2022-10-28-attack-on-deri-protocol-3eb4f1ecd49d\"\r\n            >\r\n              here\r\n            </a>{\" \"}\r\n            for more details.\r\n          </div>\r\n          <div className=\"wallet-address\">\r\n            <span className=\"blue-logo\"></span>\r\n            {formatAddress(wallet.detail.account)}\r\n          </div>\r\n          <div className=\"wallet-balance\">\r\n            Recovery Amount :{\" \"}\r\n            <DeriNumberFormat\r\n              value={balance}\r\n              decimalScale={2}\r\n              thousandSeparator={true}\r\n            />{\" \"}\r\n            USDC\r\n          </div>\r\n\r\n          <div className=\"airdrop-time position\">\r\n            <div className=\"time-logo\">\r\n              <img src={timeLogo} alt=\"\" />\r\n            </div>\r\n            <div className=\"time-text\">\r\n              <div className=\"time-title\">\r\n                <div>{lang[\"start-time\"]}</div>\r\n                <div>{lang[\"expire-time\"]}</div>\r\n              </div>\r\n              <div>\r\n                <div>2022-11-08 00:00:00 UTC</div>\r\n                <div>2023-02-08 00:00:00 UTC</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"claim\">\r\n            <Button\r\n              fontWeight=\"bold\"\r\n              disabled={disabled}\r\n              label={lang[\"claim\"]}\r\n              width={277}\r\n              height={72}\r\n              fontSize={32}\r\n              onClick={click}\r\n              bgColor={undefined}\r\n              selectedBorderColor={undefined}\r\n              position={undefined}\r\n              icon={undefined}\r\n              className={undefined}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default inject(\"wallet\", \"poolManager\")(observer(Compensation));\r\n"],"sourceRoot":""}
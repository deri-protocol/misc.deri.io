{"version":3,"sources":["../../src/index.ts"],"names":["TorusConnector","chainId","initOptions","constructorOptions","loginOptions","supportedChainIds","accounts","account","provider","this","torus","m","Torus","e"],"mappings":"8KAUaA,EAAb,Y,QAQE,c,MAAcC,Y,IAASC,uBAAcA,EAAA,CAAC,EAAD,E,IAAIC,8BAAqBA,EAAA,CAAC,EAAD,E,IAAIC,wBAAeA,EAAA,CAAC,EAAD,E,OAC/E,cAAM,CAAEC,kBAAmB,CAACJ,MAA5B,MAEA,UACA,gBACA,uBACA,iB,CACD,C,EAfH,G,EAAA,G,6EAAA,mD,wCAwB0B,cAAiB,EAAjB,oBAAyC,mBAAgCK,EAAhC,EAAzC,oBAAhBC,GAEN,MAAO,CAAEC,SAAU,QAAZ,SAAiCD,U,OARnCE,K,iBAAA,EAAKC,M,uBACY,6DAAsC,SAAAC,GAAC,4BAAIA,OAAJ,EAAIA,EAAC,SAAL,GAAvC,oBAAdC,G,OACN,QAAa,IAAIA,EAAM,EAAvB,oB,gBACM,aAAgB,EAAhB,kC,sDArBZ,OAAAC,GAAA,sBAAAA,EAAA,gCA8BI,OAAO,QAAP,QAAOJ,KAAA,MAAP,SA9BJ,OAAAI,GAAA,sBAAAA,EAAA,+BAkCI,OAAO,QAAP,QAAOJ,KAAP,QAlCJ,OAAAI,GAAA,sBAAAA,EAAA,+BAsCI,OAAO,QAAP,QAAOJ,KAAA,0CAA8C,mBAAgCH,EAAhC,EAArD,IAtCJ,OAAAO,GAAA,sBAAAA,EAAA,2B,wBAAA,yB,MA4CUJ,K,uBAAA,oCACN,kB,GA7CJ,OAAAI,GAAA,sBAAAA,EAAA,M,OAAA,E","file":"static/js/57.e83fc150.chunk.js","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\ninterface TorusConnectorArguments {\n  chainId: number\n  initOptions?: any\n  constructorOptions?: any\n  loginOptions?: any\n}\n\nexport class TorusConnector extends AbstractConnector {\n  private readonly chainId: number\n  private readonly initOptions: any\n  private readonly constructorOptions: any\n  private readonly loginOptions: any\n\n  public torus: any\n\n  constructor({ chainId, initOptions = {}, constructorOptions = {}, loginOptions = {} }: TorusConnectorArguments) {\n    super({ supportedChainIds: [chainId] })\n\n    this.chainId = chainId\n    this.initOptions = initOptions\n    this.constructorOptions = constructorOptions\n    this.loginOptions = loginOptions\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.torus) {\n      const Torus = await import('@toruslabs/torus-embed').then(m => m?.default ?? m)\n      this.torus = new Torus(this.constructorOptions)\n      await this.torus.init(this.initOptions)\n    }\n\n    const account = await this.torus.login(this.loginOptions).then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.torus.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.torus.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.torus.ethereum.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public async deactivate() {}\n\n  public async close() {\n    await this.torus.cleanUp()\n    this.emitDeactivate()\n  }\n}\n"],"sourceRoot":""}